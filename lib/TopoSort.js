"use strict";

require("source-map-support/register");

const {
  _
} = require('rk-utils');

class TopoSort {
  constructor() {
    this.mapOfDependents = {};
    this.mapOfDependencies = {};
  }

  add(dependency, newDependents) {
    newDependents = Array.isArray(newDependents) ? newDependents : [newDependents];
    let dependents = this.mapOfDependents[dependency];
    newDependents.forEach(dependent => {
      let dependencies = this.mapOfDependencies[dependent];

      if (!dependencies) {
        this.mapOfDependencies[dependent] = new Set([dependency]);
      } else {
        dependencies.add(dependency);
      }

      if (dependents) {
        dependents.add(dependent);
      }
    });

    if (!dependents) {
      this.mapOfDependents[dependency] = new Set(newDependents);
    }
  }

  hasDependency(node) {
    return this.mapOfDependencies[node] && this.mapOfDependencies[node].size > 0 || false;
  }

  hasDependent(node) {
    return this.mapOfDependents[node] && this.mapOfDependents[node].size > 0 || false;
  }

  sort() {
    let l = [];
    let nodesWithDependents = Object.keys(this.mapOfDependents);
    let nodesWithDependencies = Object.keys(this.mapOfDependencies);
    let initialNodes = new Set(nodesWithDependents);
    nodesWithDependencies.forEach(nodeHasDependency => initialNodes.delete(nodeHasDependency));
    let s = [...initialNodes];
    let allNodes = new Set(nodesWithDependents.concat(nodesWithDependencies));
    let unsorted = allNodes.size;

    let numWithDependencies = _.mapValues(this.mapOfDependencies, node => node.size);

    while (s.length !== 0) {
      let n = s.shift();
      l.push(n);
      --unsorted;
      let dependentsOfN = this.mapOfDependents[n];

      if (dependentsOfN) {
        for (let dependentOfN of dependentsOfN) {
          if (--numWithDependencies[dependentOfN] === 0) {
            s.push(dependentOfN);
          }
        }

        ;
      }
    }

    if (unsorted !== 0) {
      let circular = [];

      for (let node in numWithDependencies) {
        if (numWithDependencies[node] !== 0) {
          circular.push(node);
        }
      }

      throw new Error('At least 1 circular dependency in nodes: \n\n' + circular.join('\n') + '\n\nGraph cannot be sorted!');
    }

    return l;
  }

}

module.exports = TopoSort;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,